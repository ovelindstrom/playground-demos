openapi: 3.1.1
info:
  title: Base Multi-Tenancy API
  version: '1.0'
  description: |
    Base API specification for multi-tenant services. This provides the foundational 
    tenant management capabilities that any multi-tenant service can implement.
    
    Key Features:
    - Tenant lifecycle management (create, read, update, delete, activate/deactivate)
    - Tenant isolation and context management
    - Flexible tenant metadata and configuration
    - Built-in tenant status and health monitoring
    - Extensible design for service-specific requirements

servers:
  - url: http://localhost:8080
    description: Local development server


components:
  schemas:
    Link:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: URI of the linked resource
        method:
          type: string
          enum: [GET, POST, PUT, DELETE, PATCH]
          description: HTTP method for the linked resource
        title:
          type: string
          description: Human-readable title for the link

    TenantCode:
      type: object
      properties:
        content:
          type: string
          pattern: '^([a-z]{3})\d{5}\/\1_(prod|sandbox|test|history)$'
          minLength: 16
          maxLength: 30
          description: Combined customer code and tenant code (e.g., "acm99101\acm_prod") for trace purposes.
      required:
        - content

  
    TenantLinks:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Link'
        health:
          $ref: '#/components/schemas/Link'
        metrics:
          $ref: '#/components/schemas/Link'
        
    TenantHealth:
      type: object
      properties:
        status:
          type: string
          enum: [HEALTHY, DEGRADED, UNHEALTHY, UNKNOWN]
        lastChecked:
          type: string
          format: date-time
        details:
          type: object
          additionalProperties: true
          description: Service-specific health details
      required:
        - status
        - lastChecked

    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the tenant
        name:
          type: string
          description: The Name of the Tenancy. Created with Customer Short Code and Tenant Type (e.g., "ACM Prod").
          minLength: 3
          maxLength: 100
        code:
          $ref: '#/components/schemas/TenantCode'
          description: The unique code for the tenant, combining customer code and tenant type.
        isActive:
          type: boolean
          default: false
        description:
          type: string
          description: Optional description of the tenant
          maxLength: 500
        health:
          $ref: '#/components/schemas/TenantHealth'
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          additionalProperties: true
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          description: Request trace identifier
      required:
        - code
        - message
        - timestamp

  parameters:
    tenantIdParam:
      name: tenantId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the tenant

    tenantSlugParam:
      name: tenantSlug
      in: path
      required: true
      schema:
        type: string
        pattern: '^([a-z]{3})\d{5}-\1_(prod|sandbox|test|history)$'
      description: URL-friendly identifier of the tenant
    

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "TENANT_NOT_FOUND"
            message: "Tenant not found"
            timestamp: "2025-06-16T10:30:00Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

security:
  - BearerAuth: []

paths:
  /api/tenants/{tenantId}:
    parameters:
      - $ref: '#/components/parameters/tenantIdParam'
  
    get:
      summary: Get tenant by ID
      description: Retrieve a specific tenant by its UUID
      operationId: getTenantById
      responses:
        '200':
          description: Tenant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/tenants/by-slug/{tenantSlug}:
    parameters:
      - $ref: '#/components/parameters/tenantSlugParam'

    get:
      summary: Get tenant by slug
      description: Retrieve a specific tenant by its URL-friendly slug
      operationId: getTenantBySlug
      responses:
        '200':
          description: Tenant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          $ref: '#/components/responses/NotFound'
